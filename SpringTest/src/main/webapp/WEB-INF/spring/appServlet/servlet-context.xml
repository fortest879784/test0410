<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 스프링에서 웹페이지 관련된 빈(객체)의 설정을 넣어놓는 파일 
	톰캣 서버가 실행되고 , 디스패처 서블릿이 톰캣의 컨테이너에 생성되어 들어갈 때 설정을 읽는다. -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
<!-- 스프링의 컨트롤러 메서드에서 문자열을 반환하면 jsp 찾아가서 포워딩하려고한다. -->
<!-- 뷰리졸버가 해당문자열 앞에 web-inf/views 를 붙여주고 해당문자열 뒤에 jsp를 붙여서 jsp를 찾아갈수있ㅆ게해준다. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
<!-- 로케이션으로 요청이 오면 매핑을 반환한다. -->
<!-- 정적자원 (css,js,이미지)등을 제공하는 경로 -->
<!-- beans 태그를 이용하면 xml 문법을 이용해 스프링에게 객체 생성을 맡길 수 있다. -->
<!-- base-package 패키지 안의 클래스들 중 ,@component라는 이노테이션이 달려있는 모든 클래스를 찾아 bean
으로 등록하고, ioc컨테이너에 집어넣는다. -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.example.exam" />
	

	
</beans:beans>


